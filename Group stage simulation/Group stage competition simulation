from itertools import combinations
margin = 0.05

world_cup_rankings = rankings.loc[(rankings['rank_date'] == rankings['rank_date'].max()) & 
                              rankings['country_full'].isin(world_cup.index.unique())]
world_cup_rankings = world_cup_rankings.set_index(['country_full'])

world_cup['points'] = 0
world_cup['total_prob'] = 0


def prepare_data_for_cnn(home, away, world_cup, world_cup_rankings, model_cnn):
home_rank = world_cup_rankings.loc[home, 'rank']
home_points = world_cup_rankings.loc[home, 'weighted_points']
opp_rank = world_cup_rankings.loc[away, 'rank']
opp_points = world_cup_rankings.loc[away, 'weighted_points']

row = pd.DataFrame({
    'rank_difference': [home_rank - opp_rank],
    'average_rank': [(home_rank + opp_rank) / 2],
    'point_difference': [home_points - opp_points],
    'score_difference': [0],
    'is_stake': [True]
})

row_values = row.values.astype(float).reshape(1, -1)


home_win_prob = model_cnn.predict_proba(row_values)[:, 1][0]
world_cup.loc[home, 'total_prob'] += home_win_prob
world_cup.loc[away, 'total_prob'] += 1 - home_win_prob
points = 0

if home_win_prob <= 0.5 - margin:
    print("{} wins with {:.2f}".format(away, 1 - home_win_prob))
    world_cup.loc[away, 'points'] += 3
elif home_win_prob > 0.5 - margin and home_win_prob < 0.5 + margin:
    print("Draw")
    world_cup.loc[home, 'points'] += 1
    world_cup.loc[away, 'points'] += 1
elif home_win_prob >= 0.5 + margin:
    points = 3
    world_cup.loc[home, 'points'] += 3
    print("{} wins with {:.2f}".format(home, home_win_prob))

for group in set(world_cup['Group']):
print('___Starting group {}:___'.format(group))
for home, away in combinations(world_cup.query('Group == "{}"'.format(group)).index, 2):
    print("{} vs. {}: ".format(home, away), end='')
    prepare_data_for_cnn(home, away, world_cup, world_cup_rankings, model_cnn)
